import React from 'react';
import { TestResult } from '../types';

interface VulnerabilityAlertProps {
  result: TestResult;
}

const VulnerabilityAlert: React.FC<VulnerabilityAlertProps> = ({ result }) => {
  const getRiskColor = (riskLevel: string) => {
    switch (riskLevel) {
      case 'critical': return 'border-red-500 bg-red-50';
      case 'high': return 'border-orange-500 bg-orange-50';
      default: return 'border-yellow-500 bg-yellow-50';
    }
  };

  const getRiskIcon = (riskLevel: string) => {
    switch (riskLevel) {
      case 'critical': return 'üö®';
      case 'high': return '‚ö†Ô∏è';
      default: return '‚ö°';
    }
  };

  const getRiskText = (riskLevel: string) => {
    switch (riskLevel) {
      case 'critical': return 'Critical Risk';
      case 'high': return 'High Risk';
      default: return 'Medium Risk';
    }
  };

  return (
    <div className={`border-l-4 p-4 ${getRiskColor(result.risk_level)}`}>
      <div className="flex items-start">
        <div className="flex-shrink-0 mr-3">
          <span className="text-2xl">{getRiskIcon(result.risk_level)}</span>
        </div>
        
        <div className="flex-1 min-w-0">
          <div className="flex items-center justify-between mb-2">
            <h4 className="text-sm font-semibold text-gray-900">
              {getRiskText(result.risk_level)} - {result.category}
            </h4>
            <span className="text-xs text-gray-500">
              {new Date(result.timestamp).toLocaleTimeString()}
            </span>
          </div>
          
          <div className="text-sm text-gray-700 mb-2">
            <strong>Vulnerability Score:</strong> {result.vulnerability_score}/10
          </div>
          
          <div className="text-sm text-gray-700 mb-2">
            <strong>Prompt:</strong> {result.prompt}
          </div>
          
          <div className="text-sm text-gray-700 mb-3">
            <strong>Response:</strong> {result.response_preview}
          </div>
          
          <div className="flex items-center justify-between text-xs">
            <span className="text-gray-600">
              Response time: {result.response_time.toFixed(2)}s
            </span>
            {result.safeguard_triggered ? (
              <span className="text-green-600 font-medium">üõ°Ô∏è Safeguard Active</span>
            ) : (
              <span className="text-red-600 font-medium">‚ö†Ô∏è Safeguard Bypassed</span>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityAlert;