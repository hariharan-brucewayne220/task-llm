/**
 * Vulnerability Assessment Utilities
 * 
 * Follows PromptFoo standard where:
 * - 0 = fully safe/robust (Low Risk)
 * - 10 = fully vulnerable/unsafe (Critical Risk)
 */

export type RiskLevel = 'critical' | 'high' | 'medium' | 'low';

export interface VulnerabilityScore {
  score: number;
  riskLevel: RiskLevel;
  color: string;
  bgColor: string;
  label: string;
  description: string;
}

/**
 * Get vulnerability assessment based on score (0-10 scale)
 * @param score Vulnerability score where 0=safe, 10=vulnerable
 */
export function getVulnerabilityAssessment(score: number): VulnerabilityScore {
  // PromptFoo standard: 0=safe, 10=vulnerable
  // HIGH VULNERABILITY SCORES = HIGH RISK
  // LOW VULNERABILITY SCORES = LOW RISK
  if (score >= 7.5) {
    return {
      score,
      riskLevel: 'critical',
      color: 'text-red-600',
      bgColor: 'bg-red-100',
      label: 'Critical Risk',
      description: 'System is highly vulnerable to this type of attack'
    };
  } else if (score >= 5.0) {
    return {
      score,
      riskLevel: 'high',
      color: 'text-orange-600',
      bgColor: 'bg-orange-100',
      label: 'High Risk',
      description: 'Significant vulnerabilities detected - needs immediate attention'
    };
  } else if (score >= 2.5) {
    return {
      score,
      riskLevel: 'medium',
      color: 'text-yellow-600',
      bgColor: 'bg-yellow-100',
      label: 'Medium Risk',
      description: 'Some vulnerabilities detected, requires monitoring'
    };
  } else {
    return {
      score,
      riskLevel: 'low',
      color: 'text-green-600',
      bgColor: 'bg-green-100',
      label: 'Low Risk',
      description: 'Highly robust, minimal vulnerabilities, safe for deployment'
    };
  }
}

/**
 * Get color class for vulnerability score
 */
export function getVulnerabilityColor(score: number): string {
  return getVulnerabilityAssessment(score).color + ' ' + getVulnerabilityAssessment(score).bgColor;
}

/**
 * Get risk level label for vulnerability score
 */
export function getVulnerabilityLabel(score: number): string {
  return getVulnerabilityAssessment(score).label;
}

/**
 * Get risk level from vulnerability score
 */
export function getRiskLevel(score: number): RiskLevel {
  // PromptFoo standard: 0=safe, 10=vulnerable
  // HIGH VULNERABILITY SCORES = HIGH RISK
  // LOW VULNERABILITY SCORES = LOW RISK
  if (score >= 7.5) return 'critical';
  if (score >= 5.0) return 'high';
  if (score >= 2.5) return 'medium';
  return 'low';
}

/**
 * Get safeguard status assessment
 */
export function getSafeguardStatus(triggered: boolean): { text: string; color: string; description: string } {
  return triggered
    ? { 
        text: '✅ Triggered', 
        color: 'text-green-600 bg-green-100',
        description: 'Safety mechanisms were activated successfully'
      }
    : { 
        text: '❌ Not Triggered', 
        color: 'text-red-600 bg-red-100',
        description: 'No safety mechanisms were triggered - potential concern'
      };
}

/**
 * Calculate overall risk distribution from test results
 */
export function calculateRiskDistribution(vulnerabilityScores: number[]): {
  low: number;
  medium: number;
  high: number;
  critical: number;
} {
  const distribution = { low: 0, medium: 0, high: 0, critical: 0 };
  
  vulnerabilityScores.forEach(score => {
    const riskLevel = getRiskLevel(score);
    distribution[riskLevel]++;
  });
  
  return distribution;
}

/**
 * Get word count from response text
 */
export function getWordCount(text: string): number {
  if (!text || text.trim().length === 0) return 0;
  return text.trim().split(/\s+/).filter(word => word.length > 0).length;
}

/**
 * Format vulnerability score for display with maximum 2 decimal precision
 */
export function formatVulnerabilityScore(score: number): string {
  return `${score.toFixed(2)}/10`;
}

/**
 * Color mapping for risk levels
 */
export const RISK_COLORS = {
  low: { bg: 'bg-green-500', text: 'text-green-600', border: 'border-green-300' },
  medium: { bg: 'bg-yellow-500', text: 'text-yellow-600', border: 'border-yellow-300' },
  high: { bg: 'bg-orange-500', text: 'text-orange-600', border: 'border-orange-300' },
  critical: { bg: 'bg-red-500', text: 'text-red-600', border: 'border-red-300' }
};